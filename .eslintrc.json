{
  "env": {
    "browser": true
  },

  // :recommended syntax in extends is shorthand for setting both configs in extends[] and plugin in plugins[].
  // But we don't want to use the shorthand, so we set both configs in extends[] and plugin in plugins[].
  "extends": [
    "eslint:recommended", // is config from @typescript-eslint/eslint-plugin
    "plugin:@typescript-eslint/recommended", // is config from @typescript-eslint/eslint-plugin
    "eslint-config-react-app",
    "plugin:react/jsx-runtime",
    "eslint-config-airbnb",
    "eslint-config-airbnb-typescript",
    "eslint-config-prettier"
  ],

  "plugins": [
    "eslint-plugin-import",
    "eslint-plugin-jsx-a11y",
    "eslint-plugin-react",
    "eslint-plugin-react-hooks",
    "eslint-plugin-prettier",
    "unused-imports"
  ],
  // Telling eslint to use the typescript parser.
  "parser": "@typescript-eslint/parser",
  //  if you use a value fo 2015 it will throw an error if you try to use syntax like const or let instead of var.
  "parserOptions": {
    "project": "./tsconfig.json",
    "ecmaVersion": 2016,
    "sourceType": "module", // Allows using import/export statements
    "ecmaFeatures": {
      "jsx": true // Enable JSX since we're using React
    }
  },

  // only specifying code style or code quality rules which could introduce bugs.
  "rules": {
    "prettier/prettier": ["error"],
    "arrow-body-style": "off",
    "prefer-arrow-callback": "off",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "react/require-default-props": "off",
    "react/prop-types": "off",
    "react/react-in-jsx-scope": "off",
    "no-console": "warn",
    "no-nested-ternary": "off",
    "import/no-extraneous-dependencies": ["error", { "devDependencies": true }],
    "import/extensions": "off",
    "no-shadow": "warn",
    "jsx-a11y/label-has-associated-control": [
      "error",
      {
        "required": {
          "some": ["nesting", "id"]
        }
      }
    ],
    "jsx-a11y/label-has-for": [
      "error",
      {
        "required": {
          "some": ["nesting", "id"]
        }
      }
    ],
    "react/jsx-props-no-spreading": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "import/prefer-default-export": "off",
    "consistent-return": "warn",
    "react/no-array-index-key": "warn",
    "@typescript-eslint/no-unused-vars": "off",
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": [
      "warn",
      { "vars": "all", "varsIgnorePattern": "^_", "args": "after-used", "argsIgnorePattern": "^_" }
    ],
    "sort-imports": [
      "error",
      {
        "ignoreDeclarationSort": true
      }
    ],
    "global-require": "off",
    "react/no-children-prop": "off",
    "react/no-unused-prop-types": "warn",
    "@typescript-eslint/no-unused-expressions": "warn",
    "react/jsx-curly-brace-presence": "off"
  },

  // setting shared across all the plugin rules
  "settings": {
    "react": {
      "pragma": "React", // Pragma to use, default to "React"
      "fragment": "Fragment", // Fragment to use (may be a property of <pragma>), default to "Fragment"
      "version": "detect" // React version. "detect" automatically picks the version you have installed.
    },
    "import/resolver": {
      "webpack": {
        "alias": {
          "map": [
            ["containers", "./containers"],
            ["components", "./components"],
            ["configuration", "./configuration"],
            ["constants", "./constants"],
            ["pages", "./pages"],
            ["store", "./store"],
            ["types", "./types"],
            ["utils", "./utils"],
            ["theme", "./theme"],
            ["assets", "./assets"],
            ["mock", "./mock"],
            ["hoc", "./hoc"],
            ["lib", "./lib"],
            ["app", "./app"]
          ],
          "extensions": [".ts", ".tsx", ".js", ".jsx", ".json"]
        }
      }
    }
  }
}
